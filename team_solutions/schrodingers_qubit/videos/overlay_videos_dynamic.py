# Import moviepy editor library, which gives us the editing functions
from moviepy.editor import *
import math

sample_dict = [{0: 0.72, 1: 0.39, 2: 0.08, 3: 0.22, 4: 0.04, 5: 0.76, 6: 0.86, 7: 0.99}, {0: 0.84, 1: 0.26, 2: 0.85, 3: 0.58, 4: 0.86, 5: 0.24, 6: 0.82, 7: 0.05}, {0: 0.41, 1: 0.71, 2: 0.55, 3: 0.67, 4: 0.83, 5: 0.46, 6: 0.96, 7: 0.68}, {0: 0.16, 1: 0.79, 2: 0.87, 3: 0.65, 4: 0.8, 5: 0.62, 6: 0.49, 7: 0.96}, {0: 0.75, 1: 0.73, 2: 0.42, 3: 0.46, 4: 0.42, 5: 0.3, 6: 0.33, 7: 0.42}, {0: 0.63, 1: 0.5, 2: 0.92, 3: 0.18, 4: 0.11, 5: 0.79, 6: 0.23, 7: 0.66}, {0: 0.22, 1: 0.61, 2: 0.64, 3: 0.96, 4: 0.95, 5: 0.51, 6: 0.22, 7: 0.89}, {0: 0.91, 1: 0.59, 2: 0.72, 3: 0.19, 4: 0.37, 5: 0.06, 6: 0.46, 7: 0.6}, {0: 0.31, 1: 0.64, 2: 0.17, 3: 0.1, 4: 0.54, 5: 0.45, 6: 0.82, 7: 0.79}, {0: 0.57, 1: 0.28, 2: 0.21, 3: 0.1, 4: 0.61, 5: 0.76, 6: 0.48, 7: 0.91}, {0: 0.6, 1: 0.13, 2: 0.51, 3: 0.1, 4: 0.57, 5: 0.95, 6: 0.16, 7: 0.15}, {0: 0.34, 1: 0.03, 2: 0.73, 3: 0.92, 4: 0.31, 5: 0.96, 6: 0.34, 7: 0.42}, {0: 0.02, 1: 0.11, 2: 0.09, 3: 0.13, 4: 0.05, 5: 0.26, 6: 0.86, 7: 0.59}, {0: 0.08, 1: 0.24, 2: 0.34, 3: 0.45, 4: 0.37, 5: 0.02, 6: 0.63, 7: 0.88}, {0: 0.92, 1: 0.98, 2: 0.26, 3: 0.6, 4: 0.48, 5: 0.3, 6: 0.33, 7: 0.39}, {0: 0.63, 1: 0.12, 2: 0.56, 3: 0.33, 4: 0.09, 5: 0.8, 6: 0.76, 7: 0.19}, {0: 0.54, 1: 0.0, 2: 0.82, 3: 1.0, 4: 0.99, 5: 0.94, 6: 0.79, 7: 0.36}, {0: 0.82, 1: 0.22, 2: 0.75, 3: 0.77, 4: 0.75, 5: 0.95, 6: 0.85, 7: 0.98}, {0: 0.5, 1: 0.18, 2: 0.39, 3: 0.83, 4: 0.96, 5: 0.44, 6: 0.6, 7: 0.07}, {0: 0.28, 1: 0.26, 2: 0.9, 3: 0.86, 4: 0.25, 5: 0.27, 6: 0.53, 7: 0.44}, {0: 0.12, 1: 0.21, 2: 0.46, 3: 0.92, 4: 0.21, 5: 0.81, 6: 0.52, 7: 0.06}, {0: 0.46, 1: 0.94, 2: 0.83, 3: 0.73, 4: 0.35, 5: 0.04, 6: 0.24, 7: 0.7}, {0: 0.63, 1: 0.03, 2: 0.05, 3: 0.46, 4: 0.76, 5: 0.81, 6: 0.18, 7: 0.94}, {0: 0.2, 1: 0.4, 2: 0.59, 3: 0.14, 4: 0.36, 5: 0.43, 6: 0.29, 7: 0.17}, {0: 0.28, 1: 0.18, 2: 0.85, 3: 0.58, 4: 0.53, 5: 0.2, 6: 0.04, 7: 0.97}, {0: 0.8, 1: 0.13, 2: 0.27, 3: 0.4, 4: 0.86, 5: 0.16, 6: 0.85, 7: 0.05}, {0: 0.12, 1: 0.57, 2: 0.97, 3: 0.55, 4: 0.66, 5: 0.57, 6: 0.62, 7: 0.39}, {0: 0.94, 1: 0.62, 2: 0.98, 3: 0.59, 4: 0.14, 5: 0.17, 6: 0.33, 7: 0.78}, {0: 0.62, 1: 0.95, 2: 0.17, 3: 0.29, 4: 0.31, 5: 0.3, 6: 0.32, 7: 0.67}, {0: 0.28, 1: 0.12, 2: 0.99, 3: 0.65, 4: 0.16, 5: 0.17, 6: 0.55, 7: 0.65}]
sample_dict = [{0: 0.22634539178517596, 1: 0.00028668479910600006, 2: 0.0, 3: 0.0, 4: 0.70643459538972, 5: 0.5941097690026609}, {0: 0.05265138549379534, 1: 6.180744008729201e-05, 2: 0.7436905264192042, 3: 0.8496208442769838, 4: 0.6226555389972185, 5: 0.9148995041893255}, {0: 0.030963451631485624, 1: 0.0016900575368020835, 2: 0.9889730010332495, 3: 0.9813026064616152, 4: 0.807141853716769, 5: 0.434847074376378}, {0: 0.022204013977962404, 1: 0.0141255576296324, 2: 0.8716533253922882, 3: 0.9682283952441502, 4: 0.18749205829874951, 5: 0.5519105810103263}, {0: 0.022608306018120004, 1: 0.03813258643821999, 2: 0.5344359185268502, 3: 0.9591405031765003, 4: 0.6259666734230802, 5: 0.9922747022070004}, {0: 0.004292441839938, 1: 0.18021754542683802, 2: 0.5368482452035309, 3: 0.9719938381575001, 4: 0.40738410514320594, 5: 0.3980449541268661}, {0: 2.9850911014200002e-05, 1: 0.46872545629346374, 2: 0.7906549454172617, 3: 0.98418137433058, 4: 0.7934776489977742, 5: 0.38762554612302585}, {0: 0.000104939974449187, 1: 0.96603665162035, 2: 0.5126956061253214, 3: 0.8869434634373224, 4: 0.7310216929767734, 5: 0.21327247086285236}, {0: 0.0015682426020850004, 1: 0.9508959411267603, 2: 0.19096371017665104, 3: 0.5858555676437148, 4: 0.9585167779203403, 5: 0.11207117846452498}, {0: 0.002908152438328, 1: 0.6798659668469951, 2: 0.054031048263878, 3: 0.35181726145001213, 4: 0.46328430438120005, 5: 0.064127156787078}, {0: 0.036892864105949635, 1: 0.5104309051644089, 2: 0.05735848903418304, 3: 0.099428263043873, 4: 0.25993240246348953, 5: 0.05168657544486599}, {0: 0.9969428813209997, 1: 0.4404243988640001, 2: 0.21230448260605, 3: 0.017517535375089998, 4: 0.4991453591509, 5: 0.027091372143690003}, {0: 0.9785939074999997, 1: 0.8301225941699998, 2: 0.49576772684599985, 3: 0.04721040221, 4: 0.3674288435449999, 5: 0.03641917277000001}, {0: 0.8229027090381561, 1: 0.9977481500650642, 2: 0.9092868365414397, 3: 0.0792645327621265, 4: 0.0493039072977456, 5: 0.0865946801632796}, {0: 0.6183821884483298, 1: 0.7240942665571799, 2: 0.9147665476606, 3: 0.11026939118372002, 4: 0.20790790370127002, 5: 0.14037127459285997}, {0: 0.3909283894064, 1: 0.8909561290190001, 2: 0.8780546962860001, 3: 0.0967958583188, 4: 0.07205836316980001, 5: 0.5466027708151001}, {0: 0.3165728915825477, 1: 0.9574669488702864, 2: 0.03001597198544961, 3: 0.5221166696277525, 4: 0.9999970703383151, 5: 0.9892211598618975}, {0: 0.48634260851683553, 1: 0.9954603814083002, 2: 0.6802559763899535, 3: 0.28591001825917906, 4: 0.364135843636684, 5: 0.9816147410549301}, {0: 0.3776405863955381, 1: 0.8564809578521924, 2: 0.9670281339895521, 3: 0.5945597930602905, 4: 0.446262773251651, 5: 0.830715948239508}, {0: 0.5822618470702001, 1: 0.98200442504, 2: 0.9374758608339999, 3: 0.48893896260380004, 4: 0.5298939453041001, 5: 0.4348470763137}, {0: 0.9994609012914001, 1: 0.8746252967576801, 2: 0.7179529821357681, 3: 0.9355706975795111, 4: 0.760775468064301, 5: 0.4085107780496575}, {0: 0.91658654738, 1: 0.72301243656, 2: 0.159723723935, 3: 0.9489650955200002, 4: 0.6457044810760001, 5: 0.36181104477500003}, {0: 0.30519340117800003, 1: 0.13742557840700007, 2: 0.15269981243700007, 3: 0.9429650498299997, 4: 0.9955629475999997, 5: 0.326347379424}, {0: 0.33191686402432996, 1: 0.07636810271792, 2: 0.14580591544962004, 3: 0.8710785661278998, 4: 0.985752769453, 5: 0.41901827236555994}, {0: 0.5856281463490864, 1: 0.32550616764848944, 2: 0.21428585746200848, 3: 0.764542571159101, 4: 0.9880811146030198, 5: 0.41901826215515503}, {0: 0.7066904332266088, 1: 0.8598565611946198, 2: 0.2263128458701899, 3: 0.5683692078414748, 4: 0.9197846773505, 5: 0.89943365846737}]
sample_dict = [{key : val / sum(sample_dict_dist.values()) for key, val in sample_dict_dist.items()} for sample_dict_dist in sample_dict]
print("DICT:", sample_dict)

# This list will store varying opacities as we iterate through timeframes
current_opacities = []
# Function to read the file of opacity inputs
def read_input(dict_no):
    if dict_no >= len(sample_dict):
        dict_no = len(sample_dict)-1
    opacities = []
    # List of opacity levels for each clip
    for i in range(len(sample_dict[dict_no])):
        placeholder = sample_dict[dict_no][i]
        # Append opacity value to list
        opacities.append(float(placeholder))
        # Add 'dummy value' to flexible opacitie slist
        current_opacities.append(0)
    # Return list of opacities
    return opacities

# Length of clip in seconds
total_length = 30
# This list will later be initialized to the full set of videos
full_videos = []
# This list will later be used as the final array of clips
all_clips = []
# Bottom mark of subclip, where clip starts
bottom_mark = 0
# Top mark of subclip, where clip ends
top_mark = .1
# Increment of seconds for each clip
mark_increment = top_mark - bottom_mark
# Amount of marks taken to make 1 second: used later for measurement
mark_portion = 10
# Number of subclips
no_clips = 30
for i in range(6):
    full_videos.append(VideoFileClip("video_" + str(i+1) + ".mp4"))
# This i is the amount of clips we end up adjoining
for i in range(no_clips*mark_portion):
    # Initializes list of video clips
    videos = []
    # Takes list of opacity levels from input function
    opacities = read_input(int(i/mark_portion)+1)
    #print(i)
    if int(i/mark_portion)+1 < no_clips:
        next_opacities = read_input(int(i/mark_portion)+2)
    # Iterates through videos and assigns opacities
    for ii in range(len(opacities)): 
        # Initializes video clip from file. Cuts video down to relevant subclip
        videos.append(full_videos[ii].subclip(bottom_mark, top_mark))
        # Takes current fraction of the second (e.g. 1.30 -> .30)
        decimal = math.modf(bottom_mark)[0]
        # Determines opacity by proportionally scaling towards next unit
        current_opacities[ii] = next_opacities[ii]*decimal + opacities[ii]*(1 - decimal)
        # Sets the opacity level of the video
        videos[ii] = videos[ii].set_opacity(current_opacities[ii])
    # Merges the clips of varying opacity to create a clip of the final product
    partial_video = CompositeVideoClip(videos) 
    # Adds this clip to the array of all existing clips
    all_clips.append(partial_video)
    # Updates bottom and top marks to take next clip in sequential order
    bottom_mark, top_mark = bottom_mark + mark_increment, top_mark + mark_increment
# Given that we have all clips, we can now assemble them
final_video = concatenate_videoclips(all_clips)
# Writes final video to file
final_video.write_videofile("final_video_dynamic.mp4")
